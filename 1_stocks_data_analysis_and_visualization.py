# -*- coding: utf-8 -*-
"""1 Stocks Data Analysis and Visualization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pLEXzyZyMX9MZs9RXqwG0FSPl5Tsl7L6

#1: PROBLEM STATEMENT AND PROJECT OVERVIEW

*   For investors to prooperly manage their portfolios, they need to visualize datasets, find useful patterns and gain valuable insights such as stock daily returns and risks.
*   In this project, we visualize stock data and calculate stock returns.

#2: IMPORT DATASETS AND LIBRARIES
"""

# Mount the drive
from google.colab import drive
drive.mount('/content/drive')

#Import the necesary libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from copy import copy
from scipy import stats
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go

# Read the stock data csv file, here's the list of the stocks considered:

# AAPL = Apple Stock 
# BA = Boeing 
# T = AT&T
# MGM = MGM Resorts International (Hotel Industry)
# AMZN = Amazon
# IBM = IBM
# TSLA = Tesla Motors
# GOOG = Google 
# sp500 = US Stock Market (S&P 500 is a stock market index that measures the stock performance of 500 large companies listed on U.S. stock exchange)
# Check the list of S&P 500 companies here: https://en.wikipedia.org/wiki/List_of_S%26P_500_companies

stock_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Udemy Python/Data/stock.csv')
stock_df = stock_df[stock_df.columns[1:]]
stock_df

# Sort the stock data by date
stock_df.sort_values(by = ['Date'])

# Print out the number of stocks
# [1:] means skip [0] or Date column 
print(f'Total Number of stocks : {len(stock_df.columns[1:])}')

# Print the name of stocks
for i in stock_df.columns[1:]:
  print(i)

"""- **What is the average return of the S&P500?**

"""

print(f'The average return of the S&P500: ${stock_df["sp500"].mean()}')

"""- **Which stock or index has the minimum dispertion from the mean in dollar value?**"""

print(stock_df.std())

"""- **What is the maximum price for AMZN stock over the specified time period?** """

print(f'Max Amazon price: ${max(stock_df["AMZN"])}')

stock_df.describe()

"""#3: PERFORM EXPLORATORY DATA ANALYSIS AND VISUALIZATION"""

# Check if data contains any null values
stock_df.isnull().sum()

# Getting dataframe info
stock_df.info()

# Define a function to plot the entire dataframe
# The function takes in a dataframe df as an input argument and does not return anything back!
# The function performs data visualization
# Pandas works great with matplotlib, simply plot data directly from a Pandas DataFrame using plot() method

def show_plot(df, figure_title):
  df.plot(x='Date', figsize = (15,7), linewidth = 3, title = figure_title)
  plt.grid()
  plt.show()

# Plot the data
show_plot(stock_df, 'RAW STOCK PRICES (WITHOUT NORMALIZATION)')

"""- **Print out normalized (scaled) stock prices**  

"""

def normalized(df):
  x = df.copy()
  for i in x.columns[1:]:
    x[i] = x[i]/x[i][0]
  return x

normalized_stock_df = normalized(stock_df)

normalized_stock_df

show_plot(normalized_stock_df, 'STOCK PRICES (WITH NORMALIZATION)')

"""#4: PERFORM INTERACTIVE DATA VISUALIZATION"""

# Function to perform an interactive data plotting using plotly express
# Plotly.express module which is imported as px includes functions that can plot interactive plots easily and effectively. 
# Every Plotly Express function uses graph objects internally and returns a plotly.graph_objects.Figure instance. 
def interactive_plot(df, fig_title):
  fig = px.line(title=fig_title)
  for i in df.columns[1:]:
    fig.add_scatter(x=df['Date'],y=df[i],name=i)
  fig.show()

# Plot interactive chart
interactive_plot(stock_df,'Prices (interactive plot)')

"""* **It seems that most stocks experienced massive drops in 2020, let's assume that you own 100 shares of the S&P500 and you bought them on Feb 19th, 2020. How much did you lose (in $) by March 23rd, 2020?**

"""

#It seems that most stocks experienced massive drops in 2020, let's assume that you own 100 shares of the S&P500 and you bought them on Feb 19th, 2020. How much did you lose (in $) by March 23rd, 2020?
(float(stock_df[(stock_df['Date'])=='2020-02-19']['sp500'])-float(stock_df[(stock_df['Date'])=='2020-03-23']['sp500']))*100

"""* **Plot normalized stock data in an interactive way**"""

interactive_plot(normalized(stock_df),'Normalized Prices (interactive plot)')

"""#5: CALCULATE INDIVIDUAL STOCKS DAILY RETURNS"""

# Let's calculate daily return for a single security
# Let's take the S&P500 as an example first
sp_df = stock_df['sp500'].copy()

sp_daily_return_df = sp_df.copy()

for i in range(1,len(sp_daily_return_df)):
  sp_daily_return_df[i] = ((sp_df[i]-sp_df[i-1])/sp_df[i-1])*100

sp_daily_return_df[0] = 0

sp_daily_return_df

"""
- **Calculate the daily return for Amazon stock.**
"""

amz_df = stock_df['AMZN'].copy()
amz_daily_return_df = amz_df.copy()
for i in range(1,len(amz_df)):
  amz_daily_return_df[i] = ((amz_df[i]-amz_df[i-1])/amz_df[i-1])*100
amz_daily_return_df[0]=0

amz_daily_return_df

"""#6: CALCULATE MULTIPLE STOCKS DAILY RETURNS"""

# Let's define a function to calculate stocks daily returns (for all stocks) 
def daily_return(df):
  daily_return_df = df.copy()
  for i in df.columns[1:]:
    for j in range(1,len(df)):
      daily_return_df[i][j] = ((df[i][j]-df[i][j-1])/df[i][j-1])*100
    daily_return_df[i][0] = 0
  return daily_return_df

# Get the daily returns 
daily_return_all_df = daily_return(stock_df)

daily_return_all_df

"""- **Plot the returns vs. time using both static and interactive plots**

"""

show_plot(daily_return_all_df,'Static')

interactive_plot(daily_return_all_df,'Interactive')

"""- **What is the maximum daily return in % values**
<br>Ans: approximately 33%

#7: CALCULATE THE CORRELATIONS BETWEEN DAILY RETURNS
"""

# Daily Return Correlation
corr_cm = daily_return_all_df.drop(columns=['Date']).corr()

plt.figure(figsize=(10,10))
sns.heatmap(corr_cm,annot=True)

"""- **What are the top 2 stocks that are positively correlated with the S&P500?**
<br> Google (0.68) and IBM (0.7)

- **What is the correlation between Amazon and Boeing? Comment on your answer**
<br>0.27

- **What is the correlation between MGM and Boeing? Comment on your answer**
<br> 0.55

#8: PLOT THE HISTOGRAM FOR DAILY RETURNS
"""

# Histogram of daily returns
# Stock returns are normally distributed with zero mean 
# Notice how Tesla Standard deviation is high indicating a more volatile stock

daily_return_all_df.hist(figsize=(10,10), bins=40);

"""- **Based on the histogram, which of the following stocks are more risky? T or TSLA**"""

# Group all data returns together in a list
# Make a copy of the daily returns dataframe
daily_ret_hist_df=daily_return_all_df.copy()
daily_ret_hist_df.drop(columns=['Date'],inplace=True)
daily_ret_list = []
for i in daily_ret_hist_df.columns:
  daily_ret_list.append(daily_return_all_df[i].values)
daily_ret_list

# Plotly's Python API contains a super pwerful module known as figure factory module 
# Figure factory module includes wrapper functions that create unique chart types such as interactive subplots 
# NBoeing, Tesla and MGM gains and losses are sometimes extreme! This indicates a more risky investment. 
fig = ff.create_distplot(daily_ret_list,daily_ret_hist_df.columns)
fig.show()